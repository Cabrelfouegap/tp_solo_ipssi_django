from django.core.management.base import BaseCommand
from products.models import Category, Product


class Command(BaseCommand):
    help = 'Ajoute des donn√©es de test pour l\'e-shop cyberpunk'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ Cr√©ation des donn√©es de test...')
        
        # Cr√©ation des cat√©gories
        categories_data = [
            {
                'name': 'Cyberware',
                'description': 'Implants cybern√©tiques et modifications corporelles',
                'slug': 'cyberware'
            },
            {
                'name': 'V√™tements Tech',
                'description': 'V√™tements futuristes et √©quipements tactiques',
                'slug': 'vetements-tech'
            },
            {
                'name': 'Gadgets',
                'description': 'Gadgets √©lectroniques et accessoires high-tech',
                'slug': 'gadgets'
            },
            {
                'name': 'Armes',
                'description': 'Armement futuriste et √©quipements de combat',
                'slug': 'armes'
            }
        ]
        
        categories = {}
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                slug=cat_data['slug'],
                defaults=cat_data
            )
            categories[cat_data['slug']] = category
            if created:
                self.stdout.write(f'‚úÖ Cat√©gorie cr√©√©e: {category.name}')
        
        # Cr√©ation des produits
        products_data = [
            # Cyberware
            {
                'name': 'Neural Interface X1',
                'description': 'Interface neurale de derni√®re g√©n√©ration permettant une connexion directe au r√©seau. Compatible avec tous les implants Kiroshi.',
                'price': 2500.00,
                'category': 'cyberware',
                'stock': 15,
                'featured': True
            },
            {
                'name': 'Kiroshi Optics Mk.3',
                'description': 'Implants oculaires haut de gamme avec zoom x50, vision nocturne et analyse de donn√©es en temps r√©el.',
                'price': 3200.00,
                'category': 'cyberware',
                'stock': 8,
                'featured': True
            },
            {
                'name': 'Mantis Blades',
                'description': 'Lames r√©tractables implant√©es dans les avant-bras. Acier carbone mono-mol√©culaire.',
                'price': 4500.00,
                'category': 'cyberware',
                'stock': 5,
                'featured': False
            },
            
            # V√™tements Tech
            {
                'name': 'Veste Arasaka Corporate',
                'description': 'Veste corporative blind√©e avec protection ballistique niveau III et syst√®me de refroidissement int√©gr√©.',
                'price': 890.00,
                'category': 'vetements-tech',
                'stock': 25,
                'featured': True
            },
            {
                'name': 'Combinaison Netrunner',
                'description': 'Combinaison sp√©cialis√©e pour les netrunners avec isolation EM et ports de connexion multiples.',
                'price': 1200.00,
                'category': 'vetements-tech',
                'stock': 12,
                'featured': False
            },
            {
                'name': 'Bottes de Combat Militech',
                'description': 'Bottes tactiques avec amortisseurs hydrauliques et semelles magn√©tiques.',
                'price': 450.00,
                'category': 'vetements-tech',
                'stock': 30,
                'featured': False
            },
            
            # Gadgets
            {
                'name': 'Deck de Hacking Zetatech',
                'description': 'Ordinateur portable de hacking avec processeurs quantiques et IA assistante.',
                'price': 5500.00,
                'category': 'gadgets',
                'stock': 3,
                'featured': True
            },
            {
                'name': 'Communicateur Holo',
                'description': 'Dispositif de communication holographique avec chiffrement militaire.',
                'price': 680.00,
                'category': 'gadgets',
                'stock': 20,
                'featured': False
            },
            {
                'name': 'Scanner M√©dical Portable',
                'description': 'Scanner m√©dical de poche pour diagnostic instantan√© et premiers soins.',
                'price': 1100.00,
                'category': 'gadgets',
                'stock': 18,
                'featured': False
            },
            
            # Armes
            {
                'name': 'Pistolet Plasma Nova',
                'description': 'Arme √† plasma de derni√®re g√©n√©ration avec cellules √©nerg√©tiques haute capacit√©.',
                'price': 3800.00,
                'category': 'armes',
                'stock': 7,
                'featured': True
            },
            {
                'name': 'Fusil de Pr√©cision Militech',
                'description': 'Fusil de pr√©cision avec guidage √©lectronique et munitions perforantes.',
                'price': 6200.00,
                'category': 'armes',
                'stock': 4,
                'featured': False
            },
            {
                'name': 'Katana Mono-Wire',
                'description': 'Katana traditionnel avec lame en fil mono-mol√©culaire. Tranche tout.',
                'price': 2800.00,
                'category': 'armes',
                'stock': 10,
                'featured': True
            }
        ]
        
        for prod_data in products_data:
            category_slug = prod_data.pop('category')
            prod_data['category'] = categories[category_slug]
            
            product, created = Product.objects.get_or_create(
                name=prod_data['name'],
                defaults=prod_data
            )
            if created:
                self.stdout.write(f'‚úÖ Produit cr√©√©: {product.name}')
        
        self.stdout.write('üéâ Donn√©es de test cr√©√©es avec succ√®s!')
        self.stdout.write(f'üìä {Category.objects.count()} cat√©gories')
        self.stdout.write(f'üì¶ {Product.objects.count()} produits')